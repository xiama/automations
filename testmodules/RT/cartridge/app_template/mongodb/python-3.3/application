#!/usr/bin/python
import os
import commands
from cgi import escape
from urlparse import parse_qs
import pymongo3

virtenv = os.environ['OPENSHIFT_HOME_DIR'] + 'python-3.3/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python3.3/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

def application(environ, start_response):
        parameters = parse_qs(environ.get('QUERY_STRING', ''))
        ctype = 'text/plain'
        #con = pymongo.Connection('mongodb://#user:#passwd@#host:#port')
        #db = con['#dbname']
        con = pymongo.Connection(os.environ['OPENSHIFT_MONGODB_DB_URL'])
        db = con[os.envrion['OPENSHIFT_APP_NAME']]

        coll = db['info']
        if environ['PATH_INFO'] == '/health':
                response_body = "1"
        elif environ['PATH_INFO'] == '/env':
                response_body = ['%s: %s' % (key, value)
                    for key, value in sorted(environ.items())]
                response_body = '\n'.join(response_body)
        elif environ['PATH_INFO'] == '/insert':
                if 'size' in parameters:
                    size = int(escape(parameters['size'][0]))
                else:
                    size = 500000
                for i in range(size):
                    doc = {"data"   :   "This is testing data for testing snapshoting and restoring big data in mongodb database.This is testing data for testing snapshoting and restoring big data in mongodb database."}
                    coll.insert(doc)
                response_body = '''Gear DNS: %s
%s records have been inserted into mongodb\n''' % (os.environ['OPENSHIFT_GEAR_DNS'], size)
        elif environ['PATH_INFO'] == '/delete':
                coll.remove()
                response_body = 'Gear DNS: %s\nAll the records have been deleted from mongodb database\n' % (os.environ['OPENSHIFT_GEAR_DNS'])
        elif environ['PATH_INFO'] == '/show':
                response_body = 'Gear DNS: %s\n' % (os.environ['OPENSHIFT_GEAR_DNS'])
                count = coll.count()
                if count <= 0:
                    response_body += 'There is no record in database\n'
                else:
                    doc = coll.find_one()
                    response_body += "There are %d records in database\nHere's one record: %s" % (count, str(doc['data']))
        else:
                ctype = 'text/plain'
                response_body = 'Welcome to OpenShift'

        con.close()
        status = '200 OK'
        response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))]
        #
        start_response(status, response_headers)
        return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
        from wsgiref.simple_server import make_server
        httpd = make_server('localhost', 8051, application)
        # Wait for a single request, serve it and quit.
        httpd.handle_request()
