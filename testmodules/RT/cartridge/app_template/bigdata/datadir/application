#!/usr/bin/python
import os
import commands
from cgi import escape
from urlparse import parse_qs

virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

def application(environ, start_response):
        parameters = parse_qs(environ.get('QUERY_STRING', ''))
        ctype = 'text/plain'
        if environ['PATH_INFO'] == '/health':
                response_body = "1"
        elif environ['PATH_INFO'] == '/env':
                response_body = ['%s: %s' % (key, value)
                    for key, value in sorted(environ.items())]
                response_body = '\n'.join(response_body)
        elif environ['PATH_INFO'] == '/create':
                if 'size' in parameters:
                    size = escape(parameters['size'][0])
                else:
                    size = '300'
                cmd = 'dd if=/dev/urandom of=%sbigfile bs=1M count=%s' % (os.environ['OPENSHIFT_DATA_DIR'], size)
                (ret, output) = commands.getstatusoutput(cmd)
                response_body = '\n'.join(['Command: %s' % (cmd), output, 'The bigfile has been created.'])
        elif environ['PATH_INFO'] == '/delete':
                cmd = 'rm -f %sbigfile' % (os.environ['OPENSHIFT_DATA_DIR'])
                (ret, output) = commands.getstatusoutput(cmd)
                response_body = '\n'.join(['Command: %s' % (cmd), output, 'The bigfile has been deleted.'])
        elif environ['PATH_INFO'] == '/show':
                cmd = 'ls -lh %sbigfile' % (os.environ['OPENSHIFT_DATA_DIR'])
                (ret, output) = commands.getstatusoutput(cmd)
                if ret == 0:
                    response_body = '\n'.join(['Command: %s' % (cmd), output, 'The bigfile exists.'])
                else:
                    response_body = '\n'.join(['Command: %s' % (cmd), output, 'The bigfile doesnot exist.'])
        else:
                ctype = 'text/plain'
                response_body = '''[rhc-cartridge]snapshot/restore big data to new app
[rhc-cartridge]snapshot/restore big data to existing app'''

        status = '200 OK'
        response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))]
        #
        start_response(status, response_headers)
        return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
        from wsgiref.simple_server import make_server
        httpd = make_server('localhost', 8051, application)
        # Wait for a single request, serve it and quit.
        httpd.handle_request()
