#!/usr/bin/env python
import os, sys

import common
import rhtest
import OSConf

PASSED = rhtest.PASSED
FAILED = rhtest.FAILED


class OpenShiftTest(rhtest.Test):
    INTERACTIVE = False

    def initialize(self):
        etc_dir = common.get_etc_dir()
        common.env_setup()
        self.domain_name = common.getRandomString(10)
        self.user_email = self.config.OPENSHIFT_user_email
        self.user_passwd = self.config.OPENSHIFT_user_passwd
        self.key_files = "%s/libra_key/id_rsa*" %(etc_dir)
        if self.get_run_mode() == "OnPremise":
            self.pem_file = "%s/onpremise/onpremise.pem" %(etc_dir)
        else:
            self.pem_file = "%s/libra.pem" %(etc_dir)
        self.max_gears = common.DEV_MAX_GEARS

    def finalize(self):
        pass


class CreateDomain(OpenShiftTest):
    def test_method(self):
        if not os.path.exists(os.path.expanduser("~/.ssh/id_rsa.pub")):
            # only copy the pre-configured id_rsa if one does not exist
            self.info("Copy already prepared libra ssh key file")
            ret = common.command_get_status("mkdir -p $HOME/.ssh && chmod 400 %s %s && cp -rf %s $HOME/.ssh" %(self.key_files, self.pem_file, self.key_files))
            self.assert_equal(ret, 0, "~/.ssh dir is created, and libra key files are copied")

            #common.prepare_libra_sshkey()
            #common.clean_up(user_email, user_passwd)

        self.info("Create/Alter domain for express user")
        ret = common.create_domain(self.domain_name, 
                                   self.config.OPENSHIFT_user_email, 
                                   self.config.OPENSHIFT_user_passwd)
        if ret!=0:
            ret = common.alter_domain(self.domain_name,
                                   self.config.OPENSHIFT_user_email, 
                                   self.config.OPENSHIFT_user_passwd)
        self.assert_equal(ret, 0, "domain should be created/altered successfully")

        self.info("Remove 'default' ssh key for user")
        common.remove_sshkey()

        self.info("Add ssh key")
        ret = common.add_sshkey()
        self.assert_equal(ret, 0, "Failed to add/update ssh key for user")

        self.info("Remove ssh known hosts in case host key changes")
        path = os.path.expanduser("~/.ssh/known_hosts")
        if os.path.exists(path):
            os.remove(path)

        self.info("Change permission of %s to 600" %(self.pem_file))
        ret = common.command_get_status("chmod 600 %s" %(self.pem_file))
        self.assert_equal(ret, 0, "permission of %s should be changed to 600" %(self.pem_file))
        if self.get_run_mode() == 'DEV' or self.get_run_mode() == 'OnPremise':
            self.info("Set max gears to %s" % (self.max_gears))
            ret = common.set_max_gears(self.user_email, self.max_gears)
            self.assert_equal(ret, 0, "Failed to set max gears")

            #if common.is_multinode_env():
            #    common.setup_multi_node_env()

        return self.passed("%s passed" % self.__class__.__name__)


class OpenShiftTestSuite(rhtest.TestSuite):
    pass

def get_suite(conf):
    suite = OpenShiftTestSuite(conf)
    suite.add_test(CreateDomain)
    return suite

def run(conf):
    suite = get_suite(conf)
    suite()
