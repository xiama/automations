#!/usr/bin/python
import os
import sys
from pymongo import Connection

virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

def application(environ, start_response):
    
    ctype = 'text/plain'
    if environ['PATH_INFO'] == '/health':
        response_body = "1"
    elif environ['PATH_INFO'] == '/set-max-gears':
        try:
            c = Connection('localhost', 27017)
            broker = c.openshift_broker_dev
            broker.authenticate('libra', 'momo')
            userdb = broker['user']
            user_details = { '_id' : '#mongodb_user_email#' }
            user = userdb.find_one( user_details )
            user['max_gears'] = #mongodb_max_gears#
            userdb.update( user_details, user )
        except Exception as e:
            response_body = "DB OPERATION FAILS: %s - %s" % ( type(e), e.args )
        else:
            response_body = "DB OPERATION SUCCESS"
    else:
        response_body = 'test'

    status = '200 OK'
    response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))]
	
    start_response(status, response_headers)
    return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    httpd = make_server('localhost', 8051, application)
    # Wait for a single request, serve it and quit.
    httpd.handle_request()
