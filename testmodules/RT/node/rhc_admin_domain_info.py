#!/usr/bin/env python
import os, sys

import testcase, common, OSConf
import rhtest
import database
import time
import random
# user defined packages
import openshift
import re

PASSED = rhtest.PASSED
FAILED = rhtest.FAILED

class OpenShiftTest(rhtest.Test):
    INTERACTIVE = False
    ITEST = 'DEV'

    def initialize(self):
        self.user_email = self.config.OPENSHIFT_user_email
        self.user_passwd = self.config.OPENSHIFT_user_passwd
        self.app_name = common.getRandomString(10)
        self.app_name2 = common.getRandomString(10)
        try:
            self.app_type = self.config.test_variant
        except:
            self.app_type = 'php'
        tcms_testcase_id = 125898
        self.domain_info_cmd="rhc-domain-info -l %s -p %s"%(self.user_email, self.user_passwd)

    	common.env_setup()

    def finalize(self):
        try:
            os.system("rm -rf %s; rm -rf %s" % (self.app_name, self.app_name2))
            common.destroy_app(self.app_name)
            common.destroy_app(self.app_name2)
        except:
            pass

class RhcAdminDomainInfo(OpenShiftTest):
    def test_method(self):

        self.info("[US1443][BusinessIntegration]Admin Tools: rhc-get-user-info")
#1. Create 2 or more apps for user1 and some apps for user2.
        (testcase.TestCaseStep("Create an app1",
                                  common.create_app,
                                  function_parameters=[self.app_name, common.app_types[self.app_type], self.user_email, self.user_passwd, False],
                                  expect_return=0)).run()

        (testcase.TestCaseStep("Create an app2",
                                  common.create_app,
                                  function_parameters=[self.app_name2, common.app_types[self.app_type], self.user_email, self.user_passwd, False],
                                  expect_return=0)).run()

#2. Use admin tool to get app list of user1.    

        (testcase.TestCaseStep("rhc-domain-info -l",
                                  self.run_n_check_remote_cmd_root,
                                  function_parameters=[self.domain_info_cmd, [self.app_name, self.app_name2]],
                                  expect_return=0)).run()

#3. Compare the list got from step2 with the one generated by rhc-domain-info on the client side.   

        (testcase.TestCaseStep("Local rhc-domain-info -l",
                                  "rhc-domain-info -l %s -p %s"%(self.user_email, self.user_passwd),
                                  expect_string_list=[self.app_name, self.app_name2],
                                  expect_return=0)).run()

#4. Add some aliases to the app and get app list of user1 using admin tool.

        cmd="rhc-ctl-app -a %s -c add-alias --alias 'test.com' -l %s -p %s "%(self.app_name, self.user_email, self.user_passwd)
        (testcase.TestCaseStep("Add alias",
                                  self.run_n_check_remote_cmd_root,
                                  function_parameters=[cmd,"Success"],
                                  expect_return=0)).run()

        (testcase.TestCaseStep("rhc-domain-info -l",
                                  self.run_n_check_remote_cmd_root,
                                  function_parameters=[self.domain_info_cmd, "Aliases: test.com"],
                                  expect_return=0)).run()

#5. Embed mysql(or phpmyadmin,jenkins client) to the app and get app list of user1 using admin tool.   

        cmd="rhc-ctl-app -a %s -e add-%s -l %s -p %s"%(self.app_name, common.cartridge_types['postgresql'], self.user_email, self.user_passwd)
        (testcase.TestCaseStep("Embed with postgresql",
                                  self.run_n_check_remote_cmd_root,
                                  function_parameters=[cmd, "PostgreSQL.*database added."],
                                  expect_return=0)).run()

        (testcase.TestCaseStep("rhc-domain-info -l",
                                  self.run_n_check_remote_cmd_root,
                                  function_parameters = [self.domain_info_cmd, [common.cartridge_types["postgresql"], "Connection URL: postgresql"]],
                                  expect_return=0)).run()

#6. Destroy the apps using client tools and get app list of user1 using admin tool.   

        cmd="rhc-ctl-app -a %s -c destroy -l %s -p %s -b"%(self.app_name, self.user_email, self.user_passwd)
        (testcase.TestCaseStep("Destroy the apps using client tools",
                                  self.run_n_check_remote_cmd_root,
                                  function_parameters=[cmd, "Success"],
                                  expect_return=0)).run()

        step=testcase.TestCaseStep("rhc-domain-info -l",
                                  self.run_n_check_remote_cmd_root,
                                  function_parameters=[self.domain_info_cmd, None, self.app_name],
                                  expect_return=0)
        (retcode, output) = step.run()

        if retcode==0:
            return self.passed("%s passed" % self.__class__.__name__)
        else:
            return self.failed("%s failed" % self.__class__.__name__)

    def run_n_check_remote_cmd_root(self, cmd, expect_str=None, unexpect_str=None):
        (status, output) = common.run_remote_cmd(None, cmd, True)
        if expect_str != None and isinstance(expect_str, str):
            obj = re.search(r"%s"%expect_str, output)
            if (obj):
                return 0
            else:
                return 1
        elif expect_str != None and isinstance(expect_str, dict):
            for s in expect_str:  #check all
                obj = re.search(r"%s"%s, output)
                if obj==None:
                    print "ERROR: Unable to find %s in output"%s
                    return 1
        elif expect_str == None and unexpect_str!=None and isinstance(unexpect_str, str):
            obj = re.search(r"%s"%unexpect_str, output)
            if (obj):
                return 1 #fail
            else:
                return 0
        elif expect_str == None and unexpect_str!=None and isinstance(unexpect_str, dict):
            for s in unexpect_str:  #check all
                obj = re.search(r"%s"%s, output)
                if obj!=None:
                    print "ERROR: Found unexpected string %s in output"%s
                    return 1

        return status


class OpenShiftTestSuite(rhtest.TestSuite):
    pass

def get_suite(conf):
    suite = OpenShiftTestSuite(conf)
    suite.add_test(RhcAdminDomainInfo)
    return suite

def run(conf):
    suite = get_suite(conf)
    suite()
